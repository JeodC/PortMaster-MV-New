#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    $ESUDO umount "$TOOLKIT"
    echo "Patching process failed."
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$TOOLKIT" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="utyellow.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

unzip_assets() {
    # Unzip assets from the located .zip file into $DATADIR
    echo "Unzipping assets from $ZIP_FILE..."
    ./tools/7za x "$ZIP_FILE" -o"$DATADIR" -y
    
    if [ $? -eq 0 ]; then
        echo "Assets unzipped successfully to $DATADIR."
        rm -f "$ZIP_FILE"
        rm -rf $DATADIR/*.dll $DATADIR/*.gitkeep $DATADIR/*.exe
        mv "$DATADIR/data.win" "$DATADIR/game.droid"
    else
        echo "Failed to unzip assets."
        exit 1
    fi
}

compress_audio() {  
    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        # Failure
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf ./assets
        mkdir -p saves
}

process_game() {
    # Locate the .exe file in $DATADIR
    ZIP_FILE=$(find "$DATADIR" -maxdepth 1 -name "*.zip" | head -n 1)

    if [ -z "$ZIP_FILE" ]; then
        echo "No .zip file found in $DATADIR."
        patch_failure
    else
        unzip_assets || patch_failure
    fi

    echo "Compressing audio..."
    compress_audio || patch_failure
    echo "Finishing up..."
    zip_archive || patch_failure
    
    # Unmount runtimes
    $ESUDO umount "$TOOLKIT"
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game